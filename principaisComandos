cy.visit() // visitar a página
cy.title() // verificar titulo da página (na aba)
cy.get() // buscar o seletor CSS
cy.contains('seletor', 'texto') //busca o seletor pelo titulo

cy.should("be.equal", "string") // verificar se determinado campo é igual a string
cy.should("be.visible") // verificar se o elemento está visivel
cy.should("be.checked") //verificar se está marcado os checkbox
cy.should("not.be.checked") //verifica se o checkbox não está marcado
cy.should("have.value", "string") // verificar se o campo digitado está realmente sendo demonstrado
cy.should("have.value", "") //verificar se o campo está vazio
cy.should("have.attr", "nome do atributo", "valor do atributo") //verificar o valor do atributo
cy.should("not.have.value") //verifica se o campo está sem valor 
cy.should("have.length", numero) //verifica tamanho 

cy.type() // digitar no campo
cy.type("string", { delay: 0 }) // irá otimizar e digitar o texto mais rápido

cy.click() // clicar no campo
cy.check() // sempre marca os campos tipos radio e checkbox
cy.uncheck() //sempre desmarca desmarca os campos tipos radio e checkbox
cy.clear() // limpa os dados do campo

cy.select('texto' ou 'value' ou 'indice') //selecionar campos em lista suspensa
cy.selectFile('caminho do arquivo') // selecionar arquivos
cy.selectFile('caminho do arquivo', {action: 'drag-drop'}) // simula a seleção do arquivo de que seja arrastado
cy.fixture('nome do arquivo') // para buscar arquivos da pasta fixtures;
cy.as('string') // para dar uma alias (apelido)
cy.last() //seleciona o último item
cy.invoke('removeAttr', 'nome do atributo"') //remover atributo

cy.each() //serve para iterar por meio de um array
cy.wrap() //serve para empacotar dados para ser usados futuramente

beforeEach(function () {
  "teste"
}) //executa o testes antes de cada cenário

it.only //executa somente o cenário específico

Cypress.Commands.add('nome-do-comando') //criar comando personalizado